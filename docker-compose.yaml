services:
  db:
    image: postgres:16.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./sqlite_to_postgres/movies_database.ddl:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    container_name: movies_es
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9201:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 10s
      retries: 10

  nginx:
    build: ./nginx
    container_name: movies_nginx
    ports:
      - "80:80"
    volumes:
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - uwsgi_socket:/var/run/uwsgi
    depends_on:
      - web

  web:
    build:
      context: .
      dockerfile: app/Dockerfile
    image: movies-app
    container_name: movies_app
    user: "appuser:appuser"
    entrypoint: ["/app/docker-entrypoint.sh"]
    command: ["/app/run_uwsgi.sh"]
    env_file:
      - ./.env
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - uwsgi_socket:/var/run/uwsgi
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "uwsgi", "--http-socket", ":8000", "--die-on-term", "--check-static", "/app"]
      interval: 10s
      timeout: 5s
      retries: 3

  etl:
    image: movies-app
    container_name: movies_etl
    user: "appuser:appuser"
    entrypoint: ["/app/docker-entrypoint.sh"]
    command: ["python", "-m", "sqlite_to_postgres.run_etl"]
    volumes:
      - etl_state:/app/state
      - logs:/app/logs
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: on-failure

volumes:
  postgres_data:
  es_data:
  etl_state:
  static_volume:
  media_volume:
  uwsgi_socket:
  logs: